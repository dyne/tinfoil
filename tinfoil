#!/usr/bin/env zsh
#
# Tinfoil
#
# A tool to manage multiple profiles for web browsers
#
# {{{ License
#
# Copyright (C) 2017-2020 Dyne.org Foundation
#
# Tinfoil is designed, written and maintained by Denis Roio <jaromil@dyne.org>
#
# This source code is free software; you can redistribute it and/or
# modify it under the terms of the GNU Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This source code is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Please refer
# to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, , see <https://www.gnu.org/licenses/>.

# }}} - License

# {{{ Initialisation

# resources in order of priority
# this is where tinfoil looks for template/ and firejail/ dirs
homedir=$HOME/.tinfoil
# this can be changed, for instance to move templates in a tomb
profiledir=${TINFOIL_HOME:-$homedir/profiles}

confdir=/etc/tinfoil
# this is changed to $PREFIX/share/tinfoil by make install
basedir=.

source $basedir/zuper/zuper

# globals
vars+=(browser family profile)
vars+=(profiledir homedir confdir basedir)
vars+=(templatedir create_profile profilepath)
vars+=(pidfile pid)
vars+=(found here)
vars+=(firejail_profile)
maps+=(browsertype vendor profilename)
arrs+=(browser_opts prefs)
vars+=(use_wmctrl)

source $basedir/zuper/zuper.init

# the vendor() map is used to get $familypath
# familypath="$HOME/.${vendor[$browser]}"
vendor=(firefox     "mozilla/firefox"
		firefox-esr "mozilla/firefox"
		iceweasel   "mozilla/firefox"
		icecat      "mozilla/icecat"
		palemoon    "moonchild productions/pale moon"
	    chromium    "config/chromium")

here=$(pwd)

# detect if we should use wmctrl
use_wmctrl=0
command -v wmctrl > /dev/null && use_wmctrl=1

function get_browsertype() {
	fn get_browsertype $*
	case $1 in
		chrom*)    browsertype=chrome  ;;
		firefox*)  browsertype=mozilla ;;
		icecat)    browsertype=mozilla ;;
		iceweasel) browsertype=mozilla ;;
		palemoon)  browsertype=mozilla ;;
		*) error "$1 : browser not known to tinfoil"
		   act "use the --type flag to manually select 'mozilla' or 'chrome'"
		   browsertype=""
		   ;;
	esac
}

# }}}

# {{{ Launchers

function setup-profile() {
	fn setup-profile
	req=(profile browser)
	ckreq || return $?

	if [[ $profile =~ anon ]]; then
		notice "Anonymous profile"
		ztmpd
		profilepath="$ztmpdir"/"$browser"
	    template_find || act "no template found"
		if [[ -d "$templatedir" ]]; then
			act "template: $templatedir"
			cp -ra "$templatedir" "$profilepath"
		else
			mkdir -p "$profilepath"
		fi
		[[ "$browsertype" = "chrome" ]] && browser_opts+=(--incognito)
	else

		profilepath="${profiledir}/${browser}.${profile}"
		if [[ -d "$profilepath" ]]; then
			notice "Profile found: $profilepath"
		else
			notice "New profile: $profilepath"
			mkdir -p $profilepath || {
				error "error creating profile directory"
				return 1
			}
			template_find || act "no template found"
			[[ -d "$templatedir" ]] && {
				act "template: $templatedir"
				cp -ra "$templatedir"/* "$profilepath"
			}
		fi
	fi
	return 0
}

# manages the lock and launches the desired browser
function is-running() {
	fn is-running $*
	req=(browser profile)
	ckreq || return $?

	case $browsertype in
		chrome)
			[[ -h $profilepath/SingletonLock ]] && {
				act "${browser}.${profile}: found already running"
				return 0 }
			;;
		mozilla)
			[[ -h $profilepath/lock ]] && {
				act "${browser}.${profile}: found already running"
				return 0 }
			;;
		*)
			warning "${browsertype}: cannot detect if browser is running"
			;;
	esac

	return 1

}

function _internal-list-process() {
	# support wildcards
	# [[ "$browser" = "." ]] && browser='.*'
	# [[ "$profile" = "." ]] && profile='.*'

	local -a parr
	for p in ${(f)"$(ps xjww)"}; do
		[[ "$p" =~ "tinfoil" ]] || continue
		[[ "$p" =~ "zsh" ]] || continue
		func "${p}"
		parr=(${=p})
		# zsh must be in 10th pos
		[[ "${parr[10]}" = "zsh" ]] || continue


		local v=${parr[12]}

		# check if vendor platform exists
		[[ "$vendor[$v]" = "" ]] && continue

		local prof=${parr[13]}

		func "vendor: $v profile: $prof"

		[[ "$browser" = "" ]] || [[ "$browser" = "$v"    ]] || continue
		[[ "$profile" = "" ]] || [[ "$profile" = "$prof" ]] || continue

		# print pid sid vendor profile
		print "${parr[1]} ${parr[4]} ${v} $prof"

	done
}

function list-process() {
	fn list-process $*

	[[ "$browser" = "." ]] && browser=""

	notice "List: browser[${browser:-'*'}] profile [${profile:-'*'}]"

	ps=`_internal-list-process`


	len=${#ps}
	[[ $len = 0 ]] && {
		act "No browser found running"
		return 0 }

	# space separated list: 1=pid 2=browser 3=profile
	for p in ${(f)ps}; do
		act "${p[(w)3]} ${p[(w)4]} (pid:${p[(w)1]} sid:${p[(w)2]})"
	done
	return 0
}

function kill-process() {
	fn kill-process $*

	notice "Kill: browser[${browser:-'*'}] profile[${profile:-'*'}]"

	ps=`_internal-list-process`

	[[ ${#ps} = 0 ]] && {
		act "No browser found running"
		return 1 }

	for p in ${(f)ps}; do
		# list all pids of the session and kill the last one
		local sid=${p[(w)2]}
		local lastofsession=`ps -g $sid | tail -n1`
		local kk=${lastofsession[(w)1]}
		func "kill:: $kk"
		kill $kk
		[[ $? = 0 ]] && act "killed ${p[(w)3]} ${p[(w)4]}"
	done

	return 0
}

function launch-chrome() {
	fn launch-chrome $*
	req=(browser profile)
	freq=($profilepath)
	ckreq || return $?

	func "browser: $browser"
	func "profile: $profile"

	setup-profile

	option.is_set -e && {
		cmd=$(option.value -e)
		act "executable: $cmd"
		browser="$cmd"
	}

	$browser --user-data-dir="$profilepath" ${browser_opts} ${option_params[2]}
	return 0
}

function launch-mozilla() {
	fn launch-mozilla
	req=(browser profile)
	ckreq || return $?

	func "browser: $browser"
	func "profile: $profile"

	setup-profile

	familypath="$HOME/.${vendor[$browser]}"

	func "temporary ini: ${familypath}/profiles.ini"
	mkdir -p    "$familypath"
	cat <<EOF > "$familypath"/profiles.ini
[General]
StartWithLastProfile=0
[Profile0]
Name=${profile}
IsRelative=0
Path=${profilepath}
EOF
	[[ $DEBUG = 1 ]] &&
		cat "$familypath"/profiles.ini


	# Inject preferences. We are lucky in browsers of the mozilla
	# family the appended settings override preceeding ones and the
	# unknown ones are ignored
	rm -f "$profilepath"/user.js
	for i in ${prefs}; do
		[[ "$i" = "" ]] || {
			act "config: $i"
			cat "$i" >> "$profilepath"/user.js
		}
	done
	# TODO: interesting to add preference locking functionality
    # see: http://kb.mozillazine.org/Locking_preferences

	is-running || browser_opts+=(-no-remote)

    (sleep 5; rm "$familypath"/profiles.ini) &

	option.is_set -e && {
		cmd=$(option.value -e)
		act "executable: $cmd"
		browser="$cmd"
	}

	# prefix with apulse in case installed (to overcome the need for
	# the shit of pulseaudio)
	if command -v apulse > /dev/null; then
		act "bypassing pulsaudio with apulse - alsa rox \o/" 
		apulse $browser ${browser_opts} ${option_params[2]} &
	else
		$browser ${browser_opts} ${option_params[2]} &
	fi
	return 0
}

# }}}

# {{{ Misc functions

function help_usage() {
	fn help_usage
	act "Usage: tinfoil browser profile_name"
}

# }}}

# {{{ Pathfinders

# a function that recursively searches through symlinks and scripts to
# find the ultimate ELF binary executable they point to. Assumes that
# a shell script contains the binary to call as first argument to the
# first call to ^exec
function executable_find() {
	fn executable_find $*
	local exe="$1"
	req=(exe)
	ckreq || return $?

	local step="$exe"
	local abs=0
	local found=0
	local exepath
	local exetype
	while [[ $found = 0 ]]; do
		func "$step"
		# find full path to current
		[[ "$step[1]" = "/" ]] && abs=1
		[[ "$step[1]" = "." ]] && abs=1
		if [[ $abs = 0 ]]; then
			exepath=$(command -v $step)
			[[ "$exepath" = "" ]] && {
				error "no executable found in path: $step"
				return 1
			}
			func "abs: $exepath"
			abs=1
		else
			exepath=$step
		fi

		exetype="$(file $exepath)"

		# check if a symlink
		[[ $exetype =~ symbolic ]] && {
			step="$(readlink -f $exepath)"
			func "$exepath -> $step"
			continue
		}

		# check if a script
		[[ $exetype =~ shell ]] && {
			func "shell script detected"
			for i in ${(f)"$(cat $exepath)"}; do
				func "$i"
				# bail out if nothing found in script
				found=-1
				[[ $i =~ ^exec ]] && {
					func "seems a firefox script wrapper (has ^exec line)"
					step="${i[(w)2]}"
					func "exec: $step"
					found=0
					abs=0
					break
				}
				[[ $i =~ LIBDIR ]] && {
					func "seems a chromium script wrapper (has ^LIBDIR line)"
					step="${i[(ws:=:)2]}"/${browser}
					step=${step/\$APPNAME/$browser}
					func "exec: ${step}"
					found=0
					abs=0
					break
				}
			done
		}

		[[ $exetype =~ ELF ]] && {
			func "binary found: $exepath ($exetype)"
			print $exepath
			return 0
		}
	done
	return $found
}

## looks for a file in all tinfoil directories giving precedence to
## user customisations in $homedir
function cascade_find() {
	fn cascade_find $*
	local file="$1"
	req=(file)
	ckreq || return $?
	found=""
	[[ -r "${here}/${file}" ]] && {
		found="${here}/${file}"
		return 0
	}
	[[ -r "${homedir}/${file}" ]] && {
		found="${homedir}/${file}"
		return 0
	}
	[[ -r "${confdir}/${file}" ]] && {
		found="${confdir}/${file}"
		return 0
	}
	[[ -r "${basedir}/${file}" ]] && {
		found="${basedir}/${file}"
		return 0
	}
}

function template_find() {
	fn template_find
	req=(browser profile)
	ckreq || return $?

	cascade_find "templates/${browser}.${profile}" && {
	   templatedir="$found"
	   return 0
	}

	cascade_find "templates/${browser}" && {
		templatedir="$found"
		return 0
	}


	cascade_find "templates/${browsertype}" && {
		templatedir="$found"
		return 0
	}

	return 1
}

function prefs_find() {
	fn prefs_find
	req=(browsertype)
	ckreq || return $?

	prefs=()
	case $browsertype in
		mozilla)
			cascade_find "templates/${browsertype}-prefs.js" && {
				prefs+="$found"
			}

			cascade_find "templates/${browser}-prefs.js" && {
				prefs+="$found"
			}

			cascade_find "templates/${profile}-prefs.js" && {
				prefs+="$found"
			}

			cascade_find "templates/${browsertype}.${profile}-prefs.js" && {
				prefs+="$found"
			}

			cascade_find "templates/${browser}.${profile}-prefs.js" && {
				prefs+="$found"
			}

			;;
		chrome)
			# TODO: chromium default preferences
			;;
	esac

	return 0
}

function firejail_find() {
	fn firejail_find
	req=(browser browsertype)
	ckreq || return $?

	firejail_profiles=""

	cascade_find "templates/${browser}.${profile}.firejail" && {
		firejail_profiles+="
include $found"
	}
	cascade_find "templates/${browser}.firejail" && {
		firejail_profiles+="
include $found"
	}
	cascade_find "templates/${browsertype}.firejail" && {
		firejail_profiles+="
include $found"
	}
	return 1
}

# }}}

# {{{ Utilities

function clean_caches() {
	fn clean_caches
	freq=($profiledir)
	ckreq || return $?
	notice "Cleaning cache in tinfoil profiles"
	func "find $profiledir -type d -name 'CacheStorage'"
	local caches
	caches=`find $profiledir -type d -name 'CacheStorage'`
	for i in ${(f)caches}; do
		func "DEL $i/*"
		rm -rf $i/*
	done
	caches=`find $profiledir -type d -name 'Cache'`
	for i in ${(f)caches}; do
		func "DEL $i/*"
		rm -rf $i/*
	done
	caches=`find $profiledir -type d -name 'Code Cache'`
	for i in ${(f)caches}; do
		func "DEL $i/*"
		rm -rf $i/*
	done
	local caches=`find $profiledir -type d -name 'cache2'`
	for i in ${(f)caches}; do
		func "DEL $i/*"
		rm -rf $i/*
	done
	return 0
}

# }}}

notice "Tinfoil v0.5"

# {{{ Commands parsed
option_main=(h -help=h v -version=v -tmp: t: -type=t e: -exec=e)
option_subcommands[conf]=""
option_subcommands[kill]=""
option_subcommands[list]=""
option_subcommands[clean]=""

option.parse $* || return 1
func "subcommand: $subcommand"
option.is_set '-h' && help_usage && return 0

# }}}

# {{{ Main()


# create a new profile
case $subcommand in
	__empty)
		help_usage
		return 0
		;;

	conf)
		# print out the configuration for other wrappers
		browser="${option_params[1]}"
		profile="${option_params[2]}"
		[[ "$profile" = "" ]] && {
			error "usage: $0 conf browser profile"
			return 1
		}
		get_browsertype $browser
		cat <<EOF
browser="$browser"
profile="$profile"
family="$browsertype"
profilepath="~/.tinfoil/profiles/$browser.$profile"
familypath="~/.${vendor[$browser]}"
cachepath="~/.cache/${vendor[$browser]}"
EOF
		cmd=$(executable_find $browser)
		if [[ "$cmd" = "" ]]; then
			warning "executable not found for: $browser"
		else
			cat <<EOF
browser_executable="$cmd"
EOF
		fi
		firejail_find
		[[ "$firejail_profiles" = "" ]] || {
			# list the loaded profiles
			for i in ${(f)firejail_profiles}; do
				[[ $i =~ ^include ]] &&
cat <<EOF
firejail_templates+=(${i[(w)2]})
EOF
			done
		}
		[[ "$prefs" = "" ]] || {
			# list the loaded templates
			for i in ${(f)prefs}; do
				[[ "$i" = "" ]] ||
					cat <<EOF
userjs_templates+=(${i})
EOF
			done
		}

		return 0
		;;

	"kill")
		browser="${option_params[1]}"
		profile="${option_params[2]}"
		kill-process
		return $?
		;;

	"list")
		browser="${option_params[1]}"
		profile="${option_params[2]}"
		list-process
		return $?
		;;

	"clean")
		clean_caches
		return $?
		;;

	# default command start with: tinfoil [browser] [profile]
	__unknown:*)
		browser="${subcommand[(ws@:@)2]}"
		profile="${option_params[1]}"

		act "launching browser $browser with profile $profile"
		if option.is_set -t; then
			browsertype=$(option.value -t)
			act "browser type manually selected: $browsertype"
		else
			get_browsertype $browser
		fi
		[[ "${option_params[2]}" = "" ]] ||
			act "url to open: ${option_params[2]}"

		prefs_find || act "no preference found"
		
		launch-$browsertype &
		local res=$?
		sleep 1

		[[ $use_wmctrl == 1 && "$FIREJAIL" == "" ]] && {
			# parse last window open using wmctrl and rename it
			local lw=$(wmctrl -l | awk '/^0x/ { print $1; exit }')
			act "wmctrl ${lw} -T ${profile}.${browsertype}"
			wmctrl -i -r ${lw} -T ${profile}.${browsertype}
		}
		return $res

		;;

esac


# }}}
